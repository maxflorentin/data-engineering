set hive.merge.mapfiles=true;
set hive.merge.mapredfiles=true;
set hive.merge.size.per.task=4000000;
set hive.merge.smallfiles.avgsize=16000000;
set hive.exec.dynamic.partition.mode=nonstrict;
SET mapred.job.queue.name=root.dataeng;

CREATE TEMPORARY TABLE laboral as
select cod_sucursal,nro_solicitud,nro_participante,count(*) as ind_cantidad_empleos
from bi_corp_staging.alcen_laboral
where partition_date ='{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_CMN_Admision_Ind-Daily') }}'
group by cod_sucursal,nro_solicitud,nro_participante;

INSERT OVERWRITE TABLE bi_corp_common.stk_adm_ind_participantes
PARTITION (partition_date='{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_CMN_Admision_Ind-History') }}')

select
concat(lpad(p.cod_sucursal, 3, '0') ,lpad(p.nro_solicitud, 17, '0'))  as cod_adm_tramite,
cast(trim(p.nro_participante) as bigint) as cod_adm_participante,
trim(mar_titulo) as ds_adm_martitulo,
trim(mar_prod_pas) as ds_adm_marprodpas,
trim(cod_bca) as cod_adm_bca,
trim(cod_divs) as cod_adm_divs,
cast(trim(cod_tlead) as bigint) as cod_adm_tlead,
cast(trim(cod_ejec_cta) as bigint) as cod_adm_ejeccta,
trim(mar_emp_inh) as ds_adm_marempinh,
cast(trim(cod_bol_inh) as bigint) as cod_adm_bolinh,
cast(trim(nro_orden) as bigint) as cod_adm_nroorden,
cast(trim(cod_secc_inh) as bigint) as cod_adm_seccinh,
cast(trim(nro_banco) as bigint) as cod_adm_nrobanco,
trim(fec_alt_inh) as dt_adm_fecaltinh,
trim(fec_vto_inh) as dt_adm_fecvtoinh,
cast(trim(can_inh) as bigint) as fc_adm_caninh,
trim(cod_caus_inh) as cod_adm_causinh,
trim(des_caus_inh) as ds_adm_causinh,
trim(nom_nombre) as ds_adm_nomnombre,
trim(nom_apellido) as ds_adm_nomapellido,
trim(tpo_doc) as ds_adm_tpodoc,
cast(trim(nro_doc) as bigint) as cod_adm_nrodoc,
trim(fec_nacimiento) as dt_adm_fecnacimiento,
trim(mar_sexo) as ds_adm_marsexo,
cast(trim(cod_nacionalidad) as bigint) as cod_adm_nacionalidad,
trim(cod_estado_civil) as cod_adm_estadocivil,
cast(trim(can_pers_a_cargo) as bigint) as fc_adm_canpersacargo,
trim(cod_nivel_estudio) as cod_adm_nivelestudio,
trim(cod_rol_en_soli) as cod_adm_rolensoli,
trim(mar_aprb_rech_scor) as ds_adm_maraprbrechscor,
cast(trim(can_consul) as bigint) as fc_adm_canconsul,
cast(trim(can_antec_menor) as bigint) as fc_adm_canantecmenor,
cast(trim(can_antec_mayr) as bigint) as fc_adm_canantecmayr,
cast(trim(can_antec_regu) as bigint) as fc_adm_canantecregu,
trim(fec_alta_prod_cb) as dt_adm_fecaltaprodcb,
cast(trim(can_prod_actv_cb) as bigint) as fc_adm_canprodactvcb,
cast(trim(can_prod_actv_bc) as bigint) as fc_adm_canprodactvbc,
trim(cod_exper_previa_sis) as cod_adm_experpreviasis,
trim(cod_informe_veraz) as cod_adm_informeveraz,
cast(trim(mon_suel) as bigint) as fc_adm_monsuel,
cast(trim(mon_sac) as bigint) fc_adm_monsac,
cast(trim(mon_comision) as bigint) as fc_adm_moncomision,
cast(trim(mon_gratif) as bigint) as fc_adm_mongratif,
cast(trim(mon_rentas) as bigint) as fc_adm_monrentas,
cast(trim(mon_otr_ingr) as bigint) as fc_adm_monotringr,
trim(des_otr_ingr) as ds_adm_otringr,
cast(trim(mon_alquiler) as bigint) as fc_adm_monalquiler,
cast(trim(mon_expensas) as bigint) as fc_adm_monexpensas,
trim(mar_cotitular) as fc_adm_marcotitular,
trim(cod_profesion) as cod_adm_profesion,
trim(mar_cliente) as ds_adm_marcliente,
cast(trim(nro_part_cony) as bigint) as fc_adm_nropartcony,
cast(trim(can_tarjetas) as bigint) as fc_adm_cantarjetas,
cast(trim(can_antec_mayr_lev) as bigint) as fc_adm_canantecmayrlev,
cast(trim(can_antec_mayr_gra) as bigint) as fc_adm_canantecmayrgra,
cast(trim(cod_suc_veraz_reut) as bigint) as cod_adm_sucverazreut,
cast(trim(nro_solic_veraz_reut) as bigint) as fc_adm_nrosolicverazreut,
cast(trim(ide_nup) as bigint) as cod_adm_idenup,
trim(cod_val_docu) as cod_adm_valdocu,
trim(tpo_ins) as ds_adm_tpoins,
cast(trim(nro_ins) as bigint) as fc_adm_nroins,
trim(mar_fraude) as ds_adm_marfraude,
trim(mar_experiencia) as ds_adm_marexperiencia,
cast(trim(nro_score_veraz) as bigint) as fc_adm_nroscoreveraz,
trim(cod_grupo_veraz)as cod_adm_grupoveraz,
trim(cod_poblac_veraz) as cod_adm_poblacveraz,
trim(indicador_riesgo) as ds_adm_indicadorriesgo,
cast(trim(nup_empresa_asociada) as bigint) as cod_adm_nupempresaasociada,
trim(mar_max_ir) as ds_adm_marmaxir,
cast(trim(mon_ing_validos) as bigint) as fc_adm_moningvalidos,
cast(trim(lim_tope_renta) as bigint) as fc_adm_limtoperenta,
trim(mar_pyme) as ds_adm_marpyme,
trim(fec_mar_juanito) as dt_adm_fecmarjuanito,
trim(email) as ds_adm_email,
trim(celular) as ds_adm_celular,
trim(documentacion) as ds_adm_documentacion,
cast(trim(hijos) as bigint) as fc_adm_hijos,
cast(trim(importe_colegio) as bigint) as fc_adm_importecolegio,
trim(nro_lote_veraz_reut) as ds_adm_nroloteveraz_reut,
trim(mar_citi) as ds_adm_marciti,
trim(mar_rel_amex) as ds_adm_marrelamex,
trim(actividad_afip) as ds_adm_actividadafip,
trim(antig_act_afip) as ds_adm_antig_actafip,
trim(tipo_cliente) as ds_adm_tipocliente,
trim(cod_tipo_renta) as cod_adm_tiporenta,
cast(trim(cant_adel_eftvo_pesos) as bigint) as fc_adm_cantadeleftvo_pesos,
cast(trim(mon_adel_eftvo_pesos) as decimal(17,2)) as fc_adm_monadeleftvo_pesos,
cast(trim(cant_adel_eftvo_dolares) as bigint) as fc_adm_cantadeleftvo_dolares,
cast(trim(mon_adel_eftvo_dolares) as decimal(17,2)) as fc_adm_monadeleftvo_dolares,
trim(tpo_empleo) as ds_adm_tpoempleo,
trim(nom_empresa) as ds_adm_nomempresa,
trim(fec_ingreso) as dt_adm_fecingreso,
trim(cod_ocupac) as cod_adm_ocupac,
cast(trim(cod_cargo) as bigint) as cod_adm_cargo,
trim(des_desempe) as ds_adm_desempe,
trim(mar_contrat) as ds_adm_marcontrat,
trim(cod_emp_tpo) as cod_adm_emptpo,
trim(cod_emp_act) as cod_adm_empact,
trim(rubro) as ds_adm_rubro,
trim(tpo_ocupac) as ds_adm_tpoocupac,
cast(trim(cant_personas_a_cargo) as bigint) as fc_adm_cantpersonasacargo,
cast(ind_cantidad_empleos as bigint) as fc_adm_cantempleos
from bi_corp_staging.alcen_participante p
left join bi_corp_staging.alcen_laboral l on tpo_empleo='0' and l.cod_sucursal = p.cod_sucursal and l.nro_solicitud = p.nro_solicitud and trim(l.nro_participante) = trim(p.nro_participante) and l.partition_date = '{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_CMN_Admision_Ind-History') }}'
left join laboral t on p.cod_sucursal = t.cod_sucursal and p.nro_solicitud = t.nro_solicitud and p.nro_participante = t.nro_participante
where p.partition_date = '{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_CMN_Admision_Ind-History') }}'
;