name: DOWNLOAD_CACS_Movimientos-Daily
description: 'Load the CACS data from CACS Server'
owner: BI-Corp
active: true
start_date: "2020-08-24"
catchup: false
schedule_interval: '0 12 * * *'
retries: 0
include_dummy_task: true
max_active_runs: 1
loop:
  values: [MOVIMIENTOS]
  iterator: e
input:
  - name: date_from
    description: 'Date From in format YYYY-MM-DD'
  - name: date_to
    description: 'Date To in format YYYY-MM-DD'
  - name: shift
    description: 'Shift in days'
    default: 0
  - name: mode
    description: 'Partition level'
    default: days
tasks:
  - name: 'SQOOP_INGESTION'
    operator: PythonOperator
    config:
      function_name: 'loadTableCommands'
      function_def: |
        def loadTableCommands(*args, **kwargs):
              from airflow.operators.bash_operator import BashOperator
              import json
              import os
              print(kwargs)

              # VARIABLES
              extra_args= eval(kwargs.get('extra_args'))
              partition_date_value = kwargs.get('partition_date')
              table_file= os.path.join(kwargs.get('zonda_dir'),kwargs.get('table_file'))
              server_file= os.path.join(kwargs.get('zonda_dir'),kwargs.get('server_file'))
              data_lake_server= kwargs.get('data_lake_server')

              ## Read if tables comes with a fixed execution
              with  open(server_file, 'r') as serverfile:
                servers = json.loads(serverfile.read())

              ## Read Table-file
              with open(table_file, 'r') as configfile:
                data = json.loads(configfile.read())
              for table in data['tables']:
                if table['table'] == kwargs.get('table'):
                  partition_date = partition_date_value
                  command = table['command']
                  for server in servers['servers']:
                    if table['serverConfig'] == server['serverName']:
                      serverCommand = server
                  for eachServerCfg in serverCommand:
                      command = command.replace('{' + eachServerCfg + '}', serverCommand.get(eachServerCfg))
                  for eachTableCfg in table:
                    tableProperty = table.get(eachTableCfg)
                    if eachTableCfg == 'landing_path' and data_lake_server.__contains__('s3a'):
                      tableProperty = tableProperty.replace('/santander/bi-corp/landing', '/data/sqoop').replace('fact/', '').replace('dim/', '')
                    command = command.replace('{' + eachTableCfg + '}', tableProperty)

                  ## If the execution have an specific date to process in the table cfg
                  if eachTableCfg == 'date_to_load':
                    partition_date = extra_args.get(table.get(eachTableCfg))
                    print('partition_date changes to {}'.format(partition_date))
                  command = command.replace('{partition_date}', partition_date).replace('{data_lake_server}', data_lake_server)

                  ## SQOOP EXECUTION
                  conf = {'date_from': partition_date}

                  ## EXEC SQOOP COMMAND
                  t = BashOperator(task_id='internal_task', bash_command=command, retries=3)
                  t.execute(context=kwargs)
                  print("SUCCESFULL SQOOP COMMAND {} ".format(command))

      provide_context: true
      op_kwargs:
        partition_date: "{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='DOWNLOAD_CACS_Movimientos-Daily') }}"
        data_lake_server: $DATA_LAKE_SERVER
        zonda_dir: $ZONDA_DIR
        extra_args: "{{ ti.xcom_pull(task_ids='InputConfig', key='all', dag_id='DOWNLOAD_CACS_Movimientos-Daily') }}"
        table: ${e}
        table_file: "repositories/zonda-etl/scripts/shared/sqoop/config/cacs_movimientos_cfg.json"
        server_file: "repositories/zonda-etl/scripts/shared/sqoop/config/server_properties.json"
notifications:
  on_error: true
  channels: [$DEFAULT_SLACK_CHANNEL]
  users: [mjourdan@santandertecnologia.com.ar]