name: LOAD_STG_EMPLEADOS_BUP01-Daily
description: 'Load EMPLEADOS data from RIO37.BUP01'
owner: BI-Corp
active: true
start_date: "2021-04-29"
schedule_interval: '30 3 * * *'
#catchup: true
retries: 0
include_dummy_task: true
max_active_runs: 1
loop:
  values: [arbol_cc_vw_lake, personas_vw_lake]
  iterator: e
input:
  - name: date_from
    description: 'Date From in format YYYY-MM-DD'
  - name: date_to
    description: 'Date To in format YYYY-MM-DD'
  - name: shift
    description: 'Shift in days'
    default: 0
  - name: mode
    description: 'Partition level'
    default: days
tasks:
  - name: 'SQOOP_INGESTION'
    operator: PythonOperator
    config:
      function_name: 'loadTableCommands'
      function_def: |
        def loadTableCommands(*args, **kwargs):
              from airflow.operators.bash_operator import BashOperator
              import json
              import os
              print(kwargs)

              # VARIABLES
              extra_args= eval(kwargs.get('extra_args'))
              partition_date_value = kwargs.get('partition_date')
              table_file= os.path.join(kwargs.get('zonda_dir'),kwargs.get('table_file'))
              server_file= os.path.join(kwargs.get('zonda_dir'),kwargs.get('server_file'))
              data_lake_server= kwargs.get('data_lake_server')

              ## Read if tables comes with a fixed execution
              with  open(server_file, 'r') as serverfile:
                servers = json.loads(serverfile.read())

              ## Read Table-file
              with open(table_file, 'r') as configfile:
                data = json.loads(configfile.read())
              for table in data['tables']:
                if table['table'] == kwargs.get('table'):
                  partition_date = partition_date_value
                  command = table['command']
                  for server in servers['servers']:
                    if table['serverConfig'] == server['serverName']:
                      serverCommand = server
                  for eachServerCfg in serverCommand:
                      command = command.replace('{' + eachServerCfg + '}', serverCommand.get(eachServerCfg))
                  for eachTableCfg in table:
                      command = command.replace('{' + eachTableCfg + '}', table.get(eachTableCfg))

                  ## If the execution have an specific date to process in the table cfg
                  if eachTableCfg == 'date_to_load':
                    partition_date = extra_args.get(table.get(eachTableCfg))
                    print('partition_date changes to {}'.format(partition_date))
                  command = command.replace('{partition_date}', partition_date).replace('{data_lake_server}', data_lake_server)

                  ## SQOOP EXECUTION
                  conf = {'date_from': partition_date}

                  ## EXEC SQOOP COMMAND
                  t = BashOperator(task_id='internal_task', bash_command=command, retries=3)
                  t.execute(context=kwargs)
                  print("SUCCESFULL SQOOP COMMAND {} ".format(command))


                  ## DECLARE VARIABLES
                  json_file = table.get('table').lower() + '_schema.json'
                  json_filepath = os.path.join(kwargs.get('zonda_dir'), "repositories/zonda-etl/scripts/layers/staging",table.get('environment'), table.get('table_type'), table.get('table').lower(), table.get('table').lower() + '_schema.json')
                  kwargs['ti'].xcom_push(key='partition_date', value=partition_date)
                  kwargs['ti'].xcom_push(key='json_file', value=json_file)
                  kwargs['ti'].xcom_push(key='json_filepath', value=json_filepath)
                  add_partition_script = 'msck repair table bi_corp_staging.' + kwargs.get('table').lower() + ';'
                  kwargs['ti'].xcom_push(key='add_partition_script', value=add_partition_script)
      provide_context: true
      op_kwargs:
        partition_date: "{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}"
        zonda_dir: $ZONDA_DIR
        data_lake_server: $DATA_LAKE_SERVER
        extra_args: "{{ ti.xcom_pull(task_ids='InputConfig', key='all', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}"
        table: ${e}
        table_file: "repositories/zonda-etl/scripts/shared/sqoop/config/rio37_empleados_cfg.json"
        server_file: "repositories/zonda-etl/scripts/shared/sqoop/config/server_properties.json"
  - name: STAGING_TABLE_Parquetize
    operator: SparkSubmitOperator
    config:
      name: 'STAGING_${e}_Parquetize'
      connection_id: cloudera_spark2
      executor_cores: 4
      executor_memory: 16G
      num_executors: 20
      files: ["{{ ti.xcom_pull(task_ids='SQOOP_INGESTION_${e}', key='json_filepath', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}"]
      application: '$ZONDA_DIR/repositories/guyra/src/guyra.py'
      py_files: '$ZONDA_DIR/repositories/guyra/src/config_file.py'
      conf: {
          'spark.yarn.appMasterEnv.partition_date_filter': "{{ ti.xcom_pull(task_ids='SQOOP_INGESTION_${e}', key='partition_date', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}",
          'spark.sql.sources.partitionOverwriteMode': 'dynamic'
        }
      application_args: ["{{ ti.xcom_pull(task_ids='SQOOP_INGESTION_${e}', key='json_file', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}"]
  - name: STAGING_HIVE_msck_repair
    operator: ZondaHiveOperator
    config:
      connection_id: cloudera_hive_beeline
      schema: default
      is_hql_file: false
      hql: "{{ ti.xcom_pull(task_ids='SQOOP_INGESTION_${e}', key='add_partition_script', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}"
  - name: SHERIFF_Control_arbol_cc_vw_lake
    operator: SparkSubmitOperator
    config:
      name: SHERIFF_Control
      connection_id: cloudera_spark2
      executor_cores: 5
      executor_memory: 8G
      num_executors: 5
      files: [ '$ZONDA_DIR/repositories/zonda-etl/scripts/layers/staging/rio37/dim/arbol_cc_vw_lake/arbol_cc_vw_lake_sheriff.json' ]
      application: '$ZONDA_DIR/repositories/zonda-etl/scripts/shared/sheriff/sheriff.py'
      conf: {
        'spark.yarn.appMasterEnv.partition_date': "{{ ti.xcom_pull(task_ids='InputConfig', key='partition_date', dag_id='LOAD_STG_EMPLEADOS_BUP01-Daily') }}",
        'spark.yarn.appMasterEnv.KAFKA_BROKERS': "$KAFKA_BROKERS",
        'spark.yarn.appMasterEnv.QA_KAFKA_TOPIC': "$QA_KAFKA_TOPIC"
        }
      application_args: [ 'arbol_cc_vw_lake_sheriff.json' ]
dependencies:
  SQOOP_INGESTION: STAGING_TABLE_Parquetize
  STAGING_TABLE_Parquetize: STAGING_HIVE_msck_repair
  STAGING_HIVE_msck_repair: SHERIFF_Control_arbol_cc_vw_lake
notifications:
  on_error: true
  channels: [$DEFAULT_SLACK_CHANNEL]
  users: [fscagnettibrusatori@santandertecnologia.com.ar]