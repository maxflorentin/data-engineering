name: CORE_Alation-Update-Metadata
description: 'Update Table Metadata & Lineage in Alation'
owner: BI-Corp
active: true
start_date: "2020-07-01"
schedule_interval: '0 9 * * *'
retries: 0
include_dummy_task: true
max_active_runs: 1
input:
  - name: alation_schema
    description: 'Uploud Alation Metadata From Json Files'
    default: json
tasks:
  - name: Execute_Script
    operator: BashOperator
    config:
      bash_command: "python3 $ZONDA_DIR/repositories/zonda-etl/scripts/shared/alation/update_table_metadata.py --schema '{{ ti.xcom_pull(task_ids='UpdateAlationMetadata', key='alation_schemas', dag_id='CORE_Alation-Update-Metadata') }}'"
  - name: UpdateAlationMetadata
    operator: PythonOperator
    config:
      function_name: 'update_alation_metadata'
      function_def: |
        def update_alation_metadata(*args, **kwargs):
            from airflow.operators.bash_operator import BashOperator
            import requests
            import json
            import os
            import glob
            import io
            import socket
            import subprocess
            import urllib.parse
            import urllib3

            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

            print('host: {}'.format(socket.gethostname()))
            session = requests.Session()
            session.verify = False

            # bindir
            bindir = os.path.dirname(os.path.realpath(__file__)).replace(os.getenv('AIRFLOW__CORE__DAGS_FOLDER') + "/autogenerated/zonda-etl", os.getenv('ZONDA_DIR') + "/repositories/zonda-etl/scripts") + "/update_table_metadata.py"
            print(bindir)

            # config directory
            config_dir = kwargs.get('zonda_dir', '/aplicaciones/bi/zonda') + "/repositories/zonda-etl/scripts/layers"
            print(config_dir)

            if kwargs.get('input_alation_schema') == 'json':
              schemas = []

              for source_filename in glob.iglob(config_dir + '**/**', recursive=True):
                  ext = os.path.splitext(source_filename)[1]

                  if ext in ['.json'] and 'alation_schema' in source_filename:

                      schemas.append(source_filename)

              alation_schemas = ','.join(str(e) for e in schemas)
              kwargs['ti'].xcom_push(key='alation_schemas', value=alation_schemas)

            else:
              alation_schemas = kwargs.get('input_alation_schema')
              kwargs['ti'].xcom_push(key='alation_schemas', value=alation_schemas)

            return

      provide_context: true
      op_kwargs:
        zonda_dir: "$ZONDA_DIR"
        input_alation_schema: "{{ ti.xcom_pull(task_ids='InputConfig', key='alation_schema', dag_id='CORE_Alation-Update-Metadata') }}"
dependencies:
  UpdateAlationMetadata: Execute_Script
